eyJ2ZXJzaW9uIjoxLCJ3b3Jrc2hvcHMiOnsiZGF5MSI6eyJwcm9ibGVtU3RhdGVtZW50IjoiRGV2ZWxvcG1lbnQgdGVhbXMgYXQgaGlnaC1ncm93dGggQjJCIFNhYVMgY29tcGFuaWVzIHN0cnVnZ2xlIHRvIHByZXZlbnQgQVBJIGZhaWx1cmVzIGJlZm9yZSB0aGV5IGltcGFjdCBjdXN0b21lcnMsIGxlYWRpbmcgdG8gJDEwMGsvaG91ciBkb3dudGltZSBjb3N0cywgY3VzdG9tZXIgY2h1cm4sIGFuZCBlbmdpbmVlcmluZyByZXNvdXJjZSBkcmFpbiIsImFjdGl2aXR5MSI6eyJtb21lbnRPZlJlYWxpemF0aW9uIjoiSSB3YXMgY29uc3VsdGluZyB3aXRoIGEgRGlyZWN0b3Igb2YgRW5naW5lZXJpbmcgYXQgYSBTZXJpZXMgQiBTYWFTIGNvbXBhbnkgZ3Jvd2luZyBmcm9tICQxME0gdG8gJDI1TSBBU1IuIFRoZXkgbWVudGlvbmVkIHRoYXQgbGFzdCBxdWFydGVyLCBhIDMtaG91ciBBUEkgZmFpbHVyZSBjb3N0IHRoZW0gb3ZlciAkMzAwSyBpbiBsb3N0IHJldmVudWUgYW5kIGVtZXJnZW5jeSBlbmdpbmVlcmluZyBjb3N0cy4gVGhlaXIgZXhpc3RpbmcgRGF0YWRvZyBtb25pdG9yaW5nIG9ubHkgYWxlcnRlZCB0aGVtIGFmdGVyIGN1c3RvbWVycyBzdGFydGVkIGNvbXBsYWluaW5nIiwid2hvRXhwZXJpZW5jZWQiOiJEZXZlbG9wbWVudCB0ZWFtcyBhdCBoaWdoLWdyb3d0aCBCMkIgU2FhUyBjb21wYW5pZXMgKCQxME0tJDEwME0pIHJlbHlpbmcgb24gbWljcm9zZXJ2aWNlcyBhcmNoaXRlY3R1cmUgYW5kIG1vZGVybiBjbG91ZCBpbmZyYXN0cnVjdHVyZSIsIndoeU1hdHRlcnMiOiJXaXRoIGRvd250aW1lIGNvc3RzIGVzdGltYXRlZCBhdCAkMTAway9ob3VyLCBldmVyeSBBUEkgZmFpbHVyZSBkaXJlY3RseSBpbXBhY3RzIHJldmVudWUsIGN1c3RvbWVyIHNhdGlzZmFjdGlvbiwgYW5kIHJlcHV0YXRpb24uIFRoZXNlIGZhaWx1cmVzIGFsc28gcHVsbCBzZW5pb3IgZW5naW5lZXJzIGF3YXkgZnJvbSBidWlsZGluZyBuZXcgZmVhdHVyZXMgdG93YXJkIGZpcmVmaWdodGluZyIsIndoYXRTdXJwcmlzZWQiOiJIb3cgcGVydmFzaXZlIHRoaXMgcHJvYmxlbSBpcyBhbW9uZyByYXBpZGx5IGdyb3dpbmcgY29tcGFuaWVzLiBUaGlzIGlzbid0IGp1c3Qgb25lIGNvbXBhbnkgc3RydWdnbGluZywgYnV0IGEgc3lzdGVtaWMgaXNzdWUgYWNyb3NzIHRoZSBlbnRpcmUgaGlnaC1ncm93dGggU2FhUyBzZWdtZW50LiBDb21wYW5pZXMgdHJhbnNpdGlvbmluZyBmcm9tIG1vbm9saXRoaWMgdG8gbWljcm9zZXJ2aWNlcyBhcmNoaXRlY3R1cmVzIGFyZSBwYXJ0aWN1bGFybHkgdnVsbmVyYWJsZSIsImhvd1JlYWxQcm9ibGVtIjoiSSdtIG5vdyB2YWxpZGF0ZWQgdGhpcyB3aXRoIDE1IGRpZmZlcmVudCBkZXZlbG9wbWVudCB0ZWFtcyBhY3Jvc3MgU2VyaWVzIEEtQyBjb21wYW5pZXMuIEFsbCBvZiB0aGVtIHJlcG9ydCBzaW1pbGFyIHBhaW4gcG9pbnRzOiByZWFjdGl2ZSBhbGVydHMsIG1hbnVhbCB0cm91Ymxlc2hvb3RpbmcsIGFuZCBzaWduaWZpY2FudCByZXNvdXJjZSBkcmFpbiBmcm9tIEFQSSBpbmNpZGVudHMiLCJjb21wbGV0ZWRBdCI6IjIwMjUtMDYtMDlUMTA6MDA6MDBaIn0sImFjdGl2aXR5MiI6eyJtYXJrZXJzIjpbeyJpZCI6MTczMzc2NDgwMDAwMCwidHlwZSI6ImNvbXBldGl0b3IiLCJ4IjoxNDAsInkiOjEwMCwibm90ZXMiOiJEYXRhZG9nIC0gZXN0YWJsaXNoZWQgQVBJIG1vbml0b3JpbmcgbGVhZGVyLCBwdXJlbHkgcmVhY3RpdmUsIGV4cGVuc2l2ZSBlbnRlcnByaXNlIHNvbHV0aW9uIn0seyJpZCI6MTczMzc2NDgwMDAwMSwidHlwZSI6ImNvbXBldGl0b3IiLCJ4IjoyMjAsInkiOjEyMCwibm90ZXMiOiJOZXcgUmVsaWMgLSBhbGwtaW4tb25lIG9ic2VydmFiaWxpdHkgcGxhdGZvcm0sIGJyb2FkIGJ1dCBsYWNrcyBBUEktc3BlY2lmaWMgcHJlZGljdGl2ZSBjYXBhYmlsaXRpZXMifSx7ImlkIjoxNzMzNzY0ODAwMDAyLCJ0eXBlIjoiY29tcGV0aXRvciIsIngiOjE4MCwieSI6ODAsIm5vdGVzIjoiRHluYXRyYWNlIC0gZW50ZXJwcmlzZSBBUE0gZm9jdXNlZCBvbiBhcHBsaWNhdGlvbiBwZXJmb3JtYW5jZSwgbm90IHByZWRpY3RpdmUgQVBJIGZhaWx1cmUgcHJldmVudGlvbiJ9LHsiaWQiOjE3MzM3NjQ4MDAwMDMsInR5cGUiOiJ1bmRlcnNlcnZlZCIsIngiOjkwLCJ5IjoyMDAsIm5vdGVzIjoiTWlkc2l6ZSB0ZWNoIGNvbXBhbmllcyAoMTAwLTUwMCBlbXBsb3llZXMpIHdpdGggbGltaXRlZCBtb25pdG9yaW5nIGJ1ZGdldHMgYnV0IGdyb3dpbmcgY29tcGxleGl0eSJ9LHsiaWQiOjE3MzM3NjQ4MDAwMDQsInR5cGUiOiJ1bmRlcnNlcnZlZCIsIngiOjI2MCwieSI6MjIwLCJub3RlcyI6IlNlcmllcyBBLUIgU2FhUyBjb21wYW5pZXMgc2NhbGluZyBmcm9tIG1vbm9saXRoaWMgdG8gbWljcm9zZXJ2aWNlcywgbmVlZCBwcmVkaWN0aXZlIG5vdCBqdXN0IHJlYWN0aXZlIn0seyJpZCI6MTczMzc2NDgwMDAwNSwidHlwZSI6InVuZGVyc2VydmVkIiwieCE6MzEwLCJ5IjoxODAsIm5vdGVzIjoiQ2xvdWQtbmF0aXZlIEZvcnR1bmUgNTAwIGNvbXBhbmllcyB3aXRoIGNyaXRpY2FsIEFQSSBpbmZyYXN0cnVjdHVyZSBhbmQgZXh0cmVtZWx5IGhpZ2ggZG93bnRpbWUgY29zdHMifSx7ImlkIjoxNzMzNzY0ODAwMDA2LCJ0eXBlIjoic3RyYXRlZ2ljIiwieCE6MjAwLCJ5IjoyNDAsIm5vdGVzIjoiUHJlZGljdGl2ZSBBUEKAW9wZXJhdGlvbnMgKFByZWRpY3RpdmVPcHMpIC0gTmV3IG1hcmtldCBjYXRlZ29yeSBmb3IgaGlnaC1ncm93dGggU2FhUyBjb21wYW5pZXMgbmVlZGluZyBwcm9hY3RpdmUgbW9uaXRvcmluZyJ9XSwibGFuZGluZ1pvbmVDaG9pY2UiOiJuZXciLCJldmlkZW5jZSI6IldlIGVudGVyIHRoZSBOZXcvT3Zlcmxvb2tlZCBTZWdtZW50cyBtYXJrZXQgYnkgY3JlYXRpbmcgYSBuZXcgY2F0ZWdvcnkgJ1ByZWRpY3RpdmUgQVBJIE9wZXJhdGlvbnMnIC0gYSBzcGVjaWFsaXplZCBuaWNoZSBmb3IgY29tcGFuaWVzIHRyYW5zaXRpb25pbmcgZnJvbSByZWFjdGl2ZSB0byBwcm9hY3RpdmUgQVBJIG1hbmFnZW1lbnQuIEV4aXN0aW5nIHNvbHV0aW9ucyBhcmUgZWl0aGVyIGV4cGVuc2l2ZSBlbnRlcnByaXNlIHRvb2xzIG9yIGJyb2FkIEFQTSBzb2x1dGlvbnMgdGhhdCBsYWNrIEFQSS1zcGVjaWZpYyBwcmVkaWN0aXZlIGNhcGFiaWxpdGllcy4gT3VyIHNwZWNpYWxpemVkIGZvY3VzIG9uIG1hY2hpbmUgbGVhcm5pbmcgZHJpdmVuIEFQSSBmYWlsdXJlIHByZXZlbnRpb24gYWRkcmVzc2VzIGEgZ2FwIHRoYXQgbm8gZXhpc3Rpbmcgc29sdXRpb24gZnVsbHkgY292ZXJzIiwiY29tcGxldGVkQXQiOiIyMDI1LTA2LTA5VDEwOjE1OjAwWiJ9LCJhY3Rpdml0eTMiOnsicHJvYmxlbVN0YXRlbWVudCI6IkRldmVsb3BtZW50IHRlYW1zIGF0IGhpZ2gtZ3Jvd3RoIEIyQiBTYWFTIGNvbXBhbmllcyBzdHJ1Z2dsZSB0byBwcmV2ZW50IEFQSSBmYWlsdXJlcyBiZWZvcmUgdGhleSBpbXBhY3QgY3VzdG9tZXJzLCBsZWFkaW5nIHRvICQxMDBrL2hvdXIgZG93bnRpbWUgY29zdHMsIGN1c3RvbWVyIGNodXJuLCBhbmQgZW5naW5lZXJpbmcgcmVzb3VyY2UgZHJhaW4iLCJzY29yZXMiOnsidXJnZW5jeSI6NSwidmFsdWUiOjUsImltcG9ydGFuY2UiOjUsIm1hcmtldEdhcCI6NCwiYWNjZXNzaWJpbGl0eSI6NH0sImV2aWRlbmNlIjp7InVyZ2VuY3kiOiJXaXRoICQxMDBrL2hvdXIgZG93bnRpbWUgY29zdHMgYW5kIGN1c3RvbWVycyBkZXBlbmRpbmcgb24gQVBJcyBmb3IgYnVzaW5lc3MtY3JpdGljYWwgb3BlcmF0aW9ucywgZmFpbHVyZXMgaGF2ZSBpbW1lZGlhdGUgYW5kIHZpc2libGUgaW1wYWN0LiBDb21wYW5pZXMgcmVwb3J0IDItNCBob3Vycy93ZWVrIGZpcmVmaWdodGluZyIsInZhbHVlIjoiQ29tcGFuaWVzIGFscmVhZHkgc3BlbmQgJDIuNUstJDRLL21vbnRoIG9uIEFQSSBtb25pdG9yaW5nIHRvb2xzIGxpa2UgRGF0YWRvZy4gUG9zaCBBTVAncyBoeWJyaWQgcHJpY2luZyBhbmQgb3V0Y29tZS1iYXNlZCBtb2RlbCBjb3VsZCBzYXZlIDMwLTUwJSBvZiBkb3dudGltZSBjb3N0cyIsImltcG9ydGFuY2UiOiJEaXJlY3RseSBhZmZlY3RzIGJvYXJkLWxldmVsIE9LUnM6IGluY3JlYXNpbmcgcHJvZml0YWJpbGl0eSBhbmQgY3VzdG9tZXIgc2F0aXNmYWN0aW9uLiBBUEkgZmFpbHVyZXMgaW1wYWN0IGNvcmUgYnVzaW5lc3MgbWV0cmljcyBhbmQgZWFybiBjYXJyeSBhIGhpZ2ggcmVwdXRhdGlvbmFsIHJpc2siLCJtYXJrZXRHYXAiOiJFeGlzdGluZyBzb2x1dGlvbnMgbGlrZSBEYXRhZG9nL05ldyBSZWxpYy9EeW5hdHJhY2UgYXJlIHB1cmVseSByZWFjdGl2ZSBhbmQgZXhwZW5zaXZlLiBObyBleGlzdGluZyBzb2x1dGlvbiBvZmZlcnMgdHJ1ZSBwcmVkaWN0aXZlIEFQSSBmYWlsdXJlIHByZXZlbnRpb24gd2l0aCBhdXRvbWF0ZWQgcmVzb2x1dGlvbiIsImFjY2Vzc2liaWxpdHkiOiJEZXZlbG9wbWVudCB0ZWFtcyBhdCB0ZWNoIGNvbXBhbmllcyBhcmUgZWFzaWx5IGlkZW50aWZpYWJsZSB0aHJvdWdoIEdpdEh1YiwgZGV2ZWxvcGVyIGNvbW11bml0aWVzLCBhbmQgZXhpc3RpbmcgQVBJIG1vbml0b3JpbmcgdG9vbCB1c2VyIGNvbW11bml0aWVzLiBBdmVyYWdlIENBQyBmb3IgdGVjaCBzZWdtZW50IGlzIHJlYXNvbmFibGUifSwidG90YWxTY29yZSI6MjMsIm1lZXRzVGhyZXNob2xkIjp0cnVlLCJjb21wbGV0ZWRBdCI6IjIwMjUtMDYtMDlUMTA6MzA6MDBaIn19fX0

What This Test Code Contains:
- Complete Day 1 workshop data with Posh AMP validated problem statement at root level for Day 2-1 import
- Activity 1 (Problem Origin Story): Director of Engineering consultation at Series B SaaS company
- Activity 2 (Market Landing Zone): Complete competitive analysis with real competitors (Datadog, New Relic, Dynatrace)
- Activity 3 (Problem Scoring): High-scoring validation (23/25) meeting all thresholds:
  - Urgency: 5 (Critical $100k/hour downtime costs)
  - Value: 5 (Companies already spending $2.5K-$4K/month on monitoring tools)  
  - Importance: 5 (Board-level OKRs: profitability and customer satisfaction)
  - Market Gap: 4 (No existing predictive API failure prevention solutions)
  - Accessibility: 4 (Identifiable through GitHub, dev communities, existing tool users)

Problem Statement: "Development teams at high-growth B2B SaaS companies struggle to prevent API failures before they impact customers, leading to $100k/hour downtime costs, customer churn, and engineering resource drain"

Use this code to test importing into Day 2-1 Activity 1 (Finding Early Customers) to validate cross-workshop data flow with Posh AMP context.